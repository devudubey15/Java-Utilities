

// 1) define your exception class by name "MyArithException"
// (MyArithException.java)
// define class "Calculator"   (Calculator.java)
// In this class define a function,which will accept an int and return double of it.
// e.g int caldouble(int)
// This function will check an int which is passed to it
// It will raise the  exception if 0 is passed or negative passed
// in case of 0 caller of this method should get error message
// "Zero not allowed" 
// in case of negative caller of this method should get error message
// "negative not allowed"
// In case of positive value it should simply return the double value.
// 	[ this method shouldn't handle the exception]

// Now define class "MyCalcApp" (MyCalcApp.java)
// In this class you accept a number from user and pass that no. to
// caldouble() method which is mentioned above.

class MyArithException extends Exception 
{
    public MyArithException(String message)
    {
        super(message);
    }
	
}
class NegativeValueException extends MyArithException
{
    public NegativeValueException(String message)
    {
        super(message);
    }
}
class ZeroValueException extends MyArithException
{
    public ZeroValueException(String message)
    {
        super(message);
    }
}
class Calculator
{
        int caldouble(int num) throws NegativeValueException,ZeroValueException
        {
            if(num <0)
            {
                throw new NegativeValueException("negative not allowed" );
            }
            if(num ==0)
            {
                throw new ZeroValueException("Zero not allowed");
            }
            return num*2;
        }

}

public class MycalcApp
{
    public static void main(String[] args)
    {
        Calculator calculator = new Calculator();
        try{
                calculator.caldouble(0);
        }
        catch(NegativeValueException ne)
        {
            System.out.println(ne);
        }
        catch(ZeroValueException ze)
        {
	        System.out.println(ze);
        }
    }
}



================================================================================================================================

//2) on the developer side create an exception:
//	NumberNotDivisibleBySevenException
//	as a checked exception
//
//create necessary jar and documentation.
//
//on client side
//	public class MyMath class with 
//		public void disp(int num)
//this disp() method will check if the number passed is not divisible by 7 
//, it will raise "NumberNotDivisibleBySevenException" or else it will simply 
//display the number passed.
//	[ this method shouldn't handle the exception]
//
//	public class Demo
//		main function 
//		invoke "disp()" of "MyMath" class.


developer side

package devpack2;

/**
 * 
 */
 @SuppressWarnings("serial")
public class NumberNotDivisibleBySevenException extends Exception 
 {
	
	/**
	 * @param 
	 */
	public NumberNotDivisibleBySevenException(String mssg)
	{
		super(mssg);
	}
	
}

------------------------------------------------------------------------------------------------
client side


package client2;

import devpack2.NumberNotDivisibleBySevenException;


/**
 * 
 */
public class MyMath {

	/**
	 * @param args
	 */
	/**
	 * @param num
	 * @throws NumberNotDivisibleBySevenException
	 */
	public void disp(int num)throws NumberNotDivisibleBySevenException
	{
		if(num%7!=0)
		{
			throw new NumberNotDivisibleBySevenException("notdivisible by 7");
		}
		else
		{
			System.out.println("i think it was divisible");
		}
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		MyMath m =new MyMath();
		// TODO Auto-generated method stub
		try
		{
			m.disp(9);
		}
		catch (NumberNotDivisibleBySevenException ne)
		{
			System.out.println(ne);
		}
		
		
	}

}

================================================================================================================================




// 3) define "MyException" as a checked exception.

// define a class "Demo" with 
// 	public void show1(), public void show2() , public void show3() and main functions.

// inside "show3()" accept a number and if it is greater than 10 raise "MyException" else display the number.
// 	[ this method shouldn't handle the exception]

// main() function should call "show1()" , 
// show1() function should call "show2()",
// show2() function should call "show3()"

// show2() should not handle the exception but show1() should handle.

import java.util.Scanner;

class MyException extends Exception
{
	public MyException(String mess)
	{
		super(mess);
	}
}
public class Demo 
{
    // Demo()
    // {}
	public void show1()
	{
		try
		{
			show2();
		}
		catch (MyException e)
		{
			System.out.println(e);
           
		}
		
	}
	public void show2()throws MyException
	{
		show3();
	}
	public void show3()throws MyException
	{
        System.out.println("Enter some values");
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        System.out.println("Entered the value is : " + num);
        sc.close();
		if(num>10)
		{
			throw new MyException("Greater value exception");
		}
		else 
		{
			System.out.println("the number is " + num);
		}
        
	}

	public static void main(String args[])
	{
        Demo d = new Demo();
		d.show1();

	}
}





================================================================================================================================


//4) on the developer side create following checked exception:
//	InvalidLengthException
//create necessary jar file and documentation.
//
//on client side
//
//public class Authenticator
//	with
//a parameterized constructor which takes String as a password.
//this class also will have "done()" method with "successful authentication" message.
//Parameterized constructor should check the length of the password passed if it is less than 5 or more that 9 , it should raise "InvalidLengthException" 
//	[ constructor shouldn't handle the exception]
//
//create a class "Demo" with main
//	inside main function create the object of "Authenticator" class and invoke "done()" method.



developer side


package devpack3;

/**
 * 
 */
public class InvalidLengthException extends Exception {

	public InvalidLengthException(String message) {
		super(message);
		// TODO Auto-generated constructor stub
	}
	
}


-------------------------------------------------------------------------------------------

client side


package clientpack3;

import devpack3.InvalidLengthException;


class Authenticator {
    /**
     * @param password
     * @throws InvalidLengthException
     */
    public Authenticator(String password) throws InvalidLengthException {
        if (password.length() < 5 || password.length() > 9) {
            throw new InvalidLengthException("Invalid password length");
        }
    }

    /**
     * 
     */
    public void done() {
        System.out.println("Successful authentication");
    }
}
public class Demo {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 try {
	            Authenticator authenticator = new Authenticator("devashee");
	         
	            
	            authenticator.done();
	            
	        } catch (InvalidLengthException e) {
	            System.out.println( e);
	        }
	}

}

==========================================================================================================================================




